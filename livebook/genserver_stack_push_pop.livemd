# GenServer Stack (push, pop)

## Section

```elixir
defmodule Stack do
  use GenServer

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Stack, <<70, 79, 82, 49, 0, 0, 14, ...>>, {:handle_cast, 2}}
```

```elixir
{:ok, pid} = GenServer.start_link(Stack, [:hello])
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.286.0>}
```

```elixir
GenServer.call(pid, :pop)
```

<!-- livebook:{"output":true} -->

```
:hello
```

```elixir
GenServer.cast(pid, {:push, :world})
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
GenServer.call(pid, :pop)
```

<!-- livebook:{"output":true} -->

```
:world
```
